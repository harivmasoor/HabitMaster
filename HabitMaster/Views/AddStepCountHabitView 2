import SwiftUI
import HealthKit

struct AddStepCountHabitView: View {
    @Environment(\.presentationMode) var presentationMode
    @State private var habitName = ""
    @State private var goal = 10000
    @State private var stepCount: Double?

    let healthStore = HKHealthStore()

    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("Habit Details")) {
                    TextField("Habit Name", text: $habitName)
                    Stepper(value: $goal, in: 1000...100000, step: 1000) {
                        Text("Goal: \(goal) steps")
                    }
                }

                Section(header: Text("Step Count")) {
                    if let stepCount = stepCount {
                        Text("You took \(Int(stepCount)) steps today.")
                    } else {
                        Button(action: {
                            requestAuthorization()
                        }) {
                            Text("Get Step Count")
                        }
                    }
                }

                Section {
                    Button(action: {
                        addHabit()
                        presentationMode.wrappedValue.dismiss()
                    }) {
                        Text("Add Habit")
                    }
                }
            }
            .navigationTitle("Add Step Count Habit")
        }
    }

    func requestAuthorization() {
        let typesToShare: Set = []
        let typesToRead: Set = [HKObjectType.quantityType(forIdentifier: .stepCount)!]

        healthStore.requestAuthorization(toShare: typesToShare, read: typesToRead) { success, error in
            if success {
                getStepCount()
            } else {
                print("Error requesting authorization: \(error?.localizedDescription ?? "Unknown error")")
            }
        }
    }

    func getStepCount() {
        let stepCountType = HKQuantityType.quantityType(forIdentifier: .stepCount)!
        let calendar = Calendar.current
        let now = Date()
        let startOfDay = calendar.startOfDay(for: now)
        let predicate = HKQuery.predicateForSamples(withStart: startOfDay, end: now, options: .strictEndDate)
        let query = HKStatisticsQuery(quantityType: stepCountType, quantitySamplePredicate: predicate, options: .cumulativeSum) { query, result, error in
            guard let result = result, let sum = result.sumQuantity() else {
                print("Error getting step count: \(error?.localizedDescription ?? "Unknown error")")
                return
            }
            let steps = sum.doubleValue(for: .count())
            DispatchQueue.main.async {
                self.stepCount = steps
            }
        }
        healthStore.execute(query)
    }

    func addHabit() {
        let habit = Habit(name: habitName, goal: goal, type: .stepCount, currentProgress: stepCount ?? 0)
        // TODO: Add habit to home view
    }
}